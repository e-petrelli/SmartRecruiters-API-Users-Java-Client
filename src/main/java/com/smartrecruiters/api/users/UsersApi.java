/*
 * Users API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.smartrecruiters.api.users;

import com.smartrecruiters.api.users.invoker.ApiCallback;
import com.smartrecruiters.api.users.invoker.ApiClient;
import com.smartrecruiters.api.users.invoker.ApiException;
import com.smartrecruiters.api.users.invoker.ApiResponse;
import com.smartrecruiters.api.users.invoker.Configuration;
import com.smartrecruiters.api.users.invoker.Pair;
import com.smartrecruiters.api.users.invoker.ProgressRequestBody;
import com.smartrecruiters.api.users.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.smartrecruiters.api.users.model.AccessGroups;
import com.smartrecruiters.api.users.model.ErrorResponse;
import java.io.File;
import com.smartrecruiters.api.users.model.NewUser;
import org.threeten.bp.OffsetDateTime;
import com.smartrecruiters.api.users.model.SemanticErrorResponse;
import com.smartrecruiters.api.users.model.SystemRoles;
import com.smartrecruiters.api.users.model.UserEntity;
import com.smartrecruiters.api.users.model.Users;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient localVarApiClient;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for accessGroupsAll
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of access groups </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://help.smartrecruiters.com/Company_settings/User_Management/Access_Groups">List access groups configured in your company Documentation</a>
     */
    public okhttp3.Call accessGroupsAllCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access-groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessGroupsAllValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = accessGroupsAllCall(_callback);
        return localVarCall;

    }

    /**
     * List access groups configured in your company
     * 
     * @return AccessGroups
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of access groups </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://help.smartrecruiters.com/Company_settings/User_Management/Access_Groups">List access groups configured in your company Documentation</a>
     */
    public AccessGroups accessGroupsAll() throws ApiException {
        ApiResponse<AccessGroups> localVarResp = accessGroupsAllWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List access groups configured in your company
     * 
     * @return ApiResponse&lt;AccessGroups&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of access groups </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://help.smartrecruiters.com/Company_settings/User_Management/Access_Groups">List access groups configured in your company Documentation</a>
     */
    public ApiResponse<AccessGroups> accessGroupsAllWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = accessGroupsAllValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AccessGroups>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List access groups configured in your company (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of access groups </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="https://help.smartrecruiters.com/Company_settings/User_Management/Access_Groups">List access groups configured in your company Documentation</a>
     */
    public okhttp3.Call accessGroupsAllAsync(final ApiCallback<AccessGroups> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessGroupsAllValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AccessGroups>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessGroupsUsersAssign
     * @param accessGroupId access group identifier (required)
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Users successfully added to access group </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User or access group not found with codes * **USER_NOT_FOUND** when user with given id doesn&#39;t exist * **ACCESS_GROUP_NOT_FOUND**  when access group with given id doesn&#39;t exist  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessGroupsUsersAssignCall(String accessGroupId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/access-groups/{accessGroupId}/users"
            .replaceAll("\\{" + "accessGroupId" + "\\}", localVarApiClient.escapeString(accessGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessGroupsUsersAssignValidateBeforeCall(String accessGroupId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accessGroupId' is set
        if (accessGroupId == null) {
            throw new ApiException("Missing the required parameter 'accessGroupId' when calling accessGroupsUsersAssign(Async)");
        }
        

        okhttp3.Call localVarCall = accessGroupsUsersAssignCall(accessGroupId, requestBody, _callback);
        return localVarCall;

    }

    /**
     * Assign users to access group
     * 
     * @param accessGroupId access group identifier (required)
     * @param requestBody  (optional)
     * @return AccessGroups
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Users successfully added to access group </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User or access group not found with codes * **USER_NOT_FOUND** when user with given id doesn&#39;t exist * **ACCESS_GROUP_NOT_FOUND**  when access group with given id doesn&#39;t exist  </td><td>  -  </td></tr>
     </table>
     */
    public AccessGroups accessGroupsUsersAssign(String accessGroupId, List<String> requestBody) throws ApiException {
        ApiResponse<AccessGroups> localVarResp = accessGroupsUsersAssignWithHttpInfo(accessGroupId, requestBody);
        return localVarResp.getData();
    }

    /**
     * Assign users to access group
     * 
     * @param accessGroupId access group identifier (required)
     * @param requestBody  (optional)
     * @return ApiResponse&lt;AccessGroups&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Users successfully added to access group </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User or access group not found with codes * **USER_NOT_FOUND** when user with given id doesn&#39;t exist * **ACCESS_GROUP_NOT_FOUND**  when access group with given id doesn&#39;t exist  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessGroups> accessGroupsUsersAssignWithHttpInfo(String accessGroupId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = accessGroupsUsersAssignValidateBeforeCall(accessGroupId, requestBody, null);
        Type localVarReturnType = new TypeToken<AccessGroups>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assign users to access group (asynchronously)
     * 
     * @param accessGroupId access group identifier (required)
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Users successfully added to access group </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User or access group not found with codes * **USER_NOT_FOUND** when user with given id doesn&#39;t exist * **ACCESS_GROUP_NOT_FOUND**  when access group with given id doesn&#39;t exist  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessGroupsUsersAssignAsync(String accessGroupId, List<String> requestBody, final ApiCallback<AccessGroups> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessGroupsUsersAssignValidateBeforeCall(accessGroupId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<AccessGroups>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accessGroupsUsersRemove
     * @param accessGroupId access group identifier (required)
     * @param id user identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User successfully removed from access group </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes * **USER_NOT_FOUND** when user with given id doesn&#39;t exist * **USER_NOT_IN_ACCESS_GROUP** when user is not member of access group  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessGroupsUsersRemoveCall(String accessGroupId, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access-groups/{accessGroupId}/users/{id}"
            .replaceAll("\\{" + "accessGroupId" + "\\}", localVarApiClient.escapeString(accessGroupId.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessGroupsUsersRemoveValidateBeforeCall(String accessGroupId, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accessGroupId' is set
        if (accessGroupId == null) {
            throw new ApiException("Missing the required parameter 'accessGroupId' when calling accessGroupsUsersRemove(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling accessGroupsUsersRemove(Async)");
        }
        

        okhttp3.Call localVarCall = accessGroupsUsersRemoveCall(accessGroupId, id, _callback);
        return localVarCall;

    }

    /**
     * Remove user from access group
     * 
     * @param accessGroupId access group identifier (required)
     * @param id user identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User successfully removed from access group </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes * **USER_NOT_FOUND** when user with given id doesn&#39;t exist * **USER_NOT_IN_ACCESS_GROUP** when user is not member of access group  </td><td>  -  </td></tr>
     </table>
     */
    public void accessGroupsUsersRemove(String accessGroupId, String id) throws ApiException {
        accessGroupsUsersRemoveWithHttpInfo(accessGroupId, id);
    }

    /**
     * Remove user from access group
     * 
     * @param accessGroupId access group identifier (required)
     * @param id user identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User successfully removed from access group </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes * **USER_NOT_FOUND** when user with given id doesn&#39;t exist * **USER_NOT_IN_ACCESS_GROUP** when user is not member of access group  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> accessGroupsUsersRemoveWithHttpInfo(String accessGroupId, String id) throws ApiException {
        okhttp3.Call localVarCall = accessGroupsUsersRemoveValidateBeforeCall(accessGroupId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove user from access group (asynchronously)
     * 
     * @param accessGroupId access group identifier (required)
     * @param id user identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User successfully removed from access group </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> with codes * **USER_NOT_FOUND** when user with given id doesn&#39;t exist * **USER_NOT_IN_ACCESS_GROUP** when user is not member of access group  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessGroupsUsersRemoveAsync(String accessGroupId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessGroupsUsersRemoveValidateBeforeCall(accessGroupId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for systemRolesAll
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of system roles </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call systemRolesAllCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system-roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call systemRolesAllValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = systemRolesAllCall(_callback);
        return localVarCall;

    }

    /**
     * List system roles
     * 
     * @return SystemRoles
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of system roles </td><td>  -  </td></tr>
     </table>
     */
    public SystemRoles systemRolesAll() throws ApiException {
        ApiResponse<SystemRoles> localVarResp = systemRolesAllWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List system roles
     * 
     * @return ApiResponse&lt;SystemRoles&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of system roles </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SystemRoles> systemRolesAllWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = systemRolesAllValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SystemRoles>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List system roles (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of system roles </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call systemRolesAllAsync(final ApiCallback<SystemRoles> _callback) throws ApiException {

        okhttp3.Call localVarCall = systemRolesAllValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SystemRoles>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersActivationActivate
     * @param id user identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User successfully activated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> When activating a previously deactivated user, whilst there is an active user has the same email. There could not be more than one activated user with the same email in the same time.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersActivationActivateCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{id}/activation"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersActivationActivateValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling usersActivationActivate(Async)");
        }
        

        okhttp3.Call localVarCall = usersActivationActivateCall(id, _callback);
        return localVarCall;

    }

    /**
     * Activate a user
     * Activate a user with given id. Users created via an API are not active. This method allows activating a user so he/she can sign in straight away. 
     * @param id user identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User successfully activated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> When activating a previously deactivated user, whilst there is an active user has the same email. There could not be more than one activated user with the same email in the same time.  </td><td>  -  </td></tr>
     </table>
     */
    public void usersActivationActivate(String id) throws ApiException {
        usersActivationActivateWithHttpInfo(id);
    }

    /**
     * Activate a user
     * Activate a user with given id. Users created via an API are not active. This method allows activating a user so he/she can sign in straight away. 
     * @param id user identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User successfully activated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> When activating a previously deactivated user, whilst there is an active user has the same email. There could not be more than one activated user with the same email in the same time.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersActivationActivateWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = usersActivationActivateValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Activate a user (asynchronously)
     * Activate a user with given id. Users created via an API are not active. This method allows activating a user so he/she can sign in straight away. 
     * @param id user identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User successfully activated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> When activating a previously deactivated user, whilst there is an active user has the same email. There could not be more than one activated user with the same email in the same time.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersActivationActivateAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersActivationActivateValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersActivationDeactivate
     * @param id user identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User successfully deactivated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersActivationDeactivateCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{id}/activation"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersActivationDeactivateValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling usersActivationDeactivate(Async)");
        }
        

        okhttp3.Call localVarCall = usersActivationDeactivateCall(id, _callback);
        return localVarCall;

    }

    /**
     * Deactivate a user
     * 
     * @param id user identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User successfully deactivated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public void usersActivationDeactivate(String id) throws ApiException {
        usersActivationDeactivateWithHttpInfo(id);
    }

    /**
     * Deactivate a user
     * 
     * @param id user identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User successfully deactivated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersActivationDeactivateWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = usersActivationDeactivateValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deactivate a user (asynchronously)
     * 
     * @param id user identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User successfully deactivated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersActivationDeactivateAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersActivationDeactivateValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersActivationEmailSend
     * @param id user identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Activation email successfully sent </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersActivationEmailSendCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{id}/activation-email"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersActivationEmailSendValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling usersActivationEmailSend(Async)");
        }
        

        okhttp3.Call localVarCall = usersActivationEmailSendCall(id, _callback);
        return localVarCall;

    }

    /**
     * Send an activation email to a user
     * Send an activation email to a user with given id. Users created via an API are not active. This method is an alternative to activating a user directly and allows sending an activation email in which a user will have to open a link and follow instructions on a screen to activate his/her account. 
     * @param id user identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Activation email successfully sent </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public void usersActivationEmailSend(String id) throws ApiException {
        usersActivationEmailSendWithHttpInfo(id);
    }

    /**
     * Send an activation email to a user
     * Send an activation email to a user with given id. Users created via an API are not active. This method is an alternative to activating a user directly and allows sending an activation email in which a user will have to open a link and follow instructions on a screen to activate his/her account. 
     * @param id user identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Activation email successfully sent </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersActivationEmailSendWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = usersActivationEmailSendValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send an activation email to a user (asynchronously)
     * Send an activation email to a user with given id. Users created via an API are not active. This method is an alternative to activating a user directly and allows sending an activation email in which a user will have to open a link and follow instructions on a screen to activate his/her account. 
     * @param id user identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Activation email successfully sent </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersActivationEmailSendAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersActivationEmailSendValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersAll
     * @param q full-text search query based on firstName, lastName, email (optional)
     * @param limit number of elements to return. max value is 100 (optional, default to 100)
     * @param pageId Unique identifier for the next page of users (optional)
     * @param updatedAfter ISO8601-formatted time boundaries for the user update time, Format: yyyy-MM-ddTHH:mm:ss.SSSZZ (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users in your company </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersAllCall(String q, Integer limit, String pageId, OffsetDateTime updatedAfter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (pageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageId", pageId));
        }

        if (updatedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedAfter", updatedAfter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersAllValidateBeforeCall(String q, Integer limit, String pageId, OffsetDateTime updatedAfter, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = usersAllCall(q, limit, pageId, updatedAfter, _callback);
        return localVarCall;

    }

    /**
     * List users of your company
     * 
     * @param q full-text search query based on firstName, lastName, email (optional)
     * @param limit number of elements to return. max value is 100 (optional, default to 100)
     * @param pageId Unique identifier for the next page of users (optional)
     * @param updatedAfter ISO8601-formatted time boundaries for the user update time, Format: yyyy-MM-ddTHH:mm:ss.SSSZZ (optional)
     * @return Users
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users in your company </td><td>  -  </td></tr>
     </table>
     */
    public Users usersAll(String q, Integer limit, String pageId, OffsetDateTime updatedAfter) throws ApiException {
        ApiResponse<Users> localVarResp = usersAllWithHttpInfo(q, limit, pageId, updatedAfter);
        return localVarResp.getData();
    }

    /**
     * List users of your company
     * 
     * @param q full-text search query based on firstName, lastName, email (optional)
     * @param limit number of elements to return. max value is 100 (optional, default to 100)
     * @param pageId Unique identifier for the next page of users (optional)
     * @param updatedAfter ISO8601-formatted time boundaries for the user update time, Format: yyyy-MM-ddTHH:mm:ss.SSSZZ (optional)
     * @return ApiResponse&lt;Users&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users in your company </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Users> usersAllWithHttpInfo(String q, Integer limit, String pageId, OffsetDateTime updatedAfter) throws ApiException {
        okhttp3.Call localVarCall = usersAllValidateBeforeCall(q, limit, pageId, updatedAfter, null);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List users of your company (asynchronously)
     * 
     * @param q full-text search query based on firstName, lastName, email (optional)
     * @param limit number of elements to return. max value is 100 (optional, default to 100)
     * @param pageId Unique identifier for the next page of users (optional)
     * @param updatedAfter ISO8601-formatted time boundaries for the user update time, Format: yyyy-MM-ddTHH:mm:ss.SSSZZ (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of users in your company </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersAllAsync(String q, Integer limit, String pageId, OffsetDateTime updatedAfter, final ApiCallback<Users> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersAllValidateBeforeCall(q, limit, pageId, updatedAfter, _callback);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersAvatarUpdate
     * @param id user identifier (required)
     * @param file The file to upload. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Avatar successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **UNMARSHALLING_ERROR** when request cannot be unmarshalled.   This might be usually caused by missing:     - &#x60;boundary&#x60; parameter in HTTP Request &#x60;Content-Type&#x60; header     - &#x60;boundary&#x60; between parts     - &#x60;Content-Disposition&#x60; header in at least one part     - &#x60;name&#x60; parameter in at least one &#x60;Content-Disposition&#x60; header.   Please check reference: https://tools.ietf.org/html/rfc7578#section-4  * **MISSING_FILE_PART** when missing part with name &#x60;file&#x60; (&#x60;file&#x60; is case sensitive) * **MISSING_FILE_NAME** when &#x60;filename&#x60; is not available in &#x60;file&#x60; part * **MISSING_MEDIA_TYPE** when media type in &#x60;Content-Type&#x60; header is not available in &#x60;file&#x60; part  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersAvatarUpdateCall(String id, File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{id}/avatar"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersAvatarUpdateValidateBeforeCall(String id, File file, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling usersAvatarUpdate(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling usersAvatarUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = usersAvatarUpdateCall(id, file, _callback);
        return localVarCall;

    }

    /**
     * Update user avatar
     * 
     * @param id user identifier (required)
     * @param file The file to upload. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Avatar successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **UNMARSHALLING_ERROR** when request cannot be unmarshalled.   This might be usually caused by missing:     - &#x60;boundary&#x60; parameter in HTTP Request &#x60;Content-Type&#x60; header     - &#x60;boundary&#x60; between parts     - &#x60;Content-Disposition&#x60; header in at least one part     - &#x60;name&#x60; parameter in at least one &#x60;Content-Disposition&#x60; header.   Please check reference: https://tools.ietf.org/html/rfc7578#section-4  * **MISSING_FILE_PART** when missing part with name &#x60;file&#x60; (&#x60;file&#x60; is case sensitive) * **MISSING_FILE_NAME** when &#x60;filename&#x60; is not available in &#x60;file&#x60; part * **MISSING_MEDIA_TYPE** when media type in &#x60;Content-Type&#x60; header is not available in &#x60;file&#x60; part  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public void usersAvatarUpdate(String id, File file) throws ApiException {
        usersAvatarUpdateWithHttpInfo(id, file);
    }

    /**
     * Update user avatar
     * 
     * @param id user identifier (required)
     * @param file The file to upload. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Avatar successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **UNMARSHALLING_ERROR** when request cannot be unmarshalled.   This might be usually caused by missing:     - &#x60;boundary&#x60; parameter in HTTP Request &#x60;Content-Type&#x60; header     - &#x60;boundary&#x60; between parts     - &#x60;Content-Disposition&#x60; header in at least one part     - &#x60;name&#x60; parameter in at least one &#x60;Content-Disposition&#x60; header.   Please check reference: https://tools.ietf.org/html/rfc7578#section-4  * **MISSING_FILE_PART** when missing part with name &#x60;file&#x60; (&#x60;file&#x60; is case sensitive) * **MISSING_FILE_NAME** when &#x60;filename&#x60; is not available in &#x60;file&#x60; part * **MISSING_MEDIA_TYPE** when media type in &#x60;Content-Type&#x60; header is not available in &#x60;file&#x60; part  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersAvatarUpdateWithHttpInfo(String id, File file) throws ApiException {
        okhttp3.Call localVarCall = usersAvatarUpdateValidateBeforeCall(id, file, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update user avatar (asynchronously)
     * 
     * @param id user identifier (required)
     * @param file The file to upload. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Avatar successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **UNMARSHALLING_ERROR** when request cannot be unmarshalled.   This might be usually caused by missing:     - &#x60;boundary&#x60; parameter in HTTP Request &#x60;Content-Type&#x60; header     - &#x60;boundary&#x60; between parts     - &#x60;Content-Disposition&#x60; header in at least one part     - &#x60;name&#x60; parameter in at least one &#x60;Content-Disposition&#x60; header.   Please check reference: https://tools.ietf.org/html/rfc7578#section-4  * **MISSING_FILE_PART** when missing part with name &#x60;file&#x60; (&#x60;file&#x60; is case sensitive) * **MISSING_FILE_NAME** when &#x60;filename&#x60; is not available in &#x60;file&#x60; part * **MISSING_MEDIA_TYPE** when media type in &#x60;Content-Type&#x60; header is not available in &#x60;file&#x60; part  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersAvatarUpdateAsync(String id, File file, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersAvatarUpdateValidateBeforeCall(id, file, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersCreate
     * @param newUser User object to be created (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> User language is not available as part of company subscription plan </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> User already exists </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Request body is invalid (e.g. values breaks model definition rules) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersCreateCall(NewUser newUser, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = newUser;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersCreateValidateBeforeCall(NewUser newUser, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = usersCreateCall(newUser, _callback);
        return localVarCall;

    }

    /**
     * Create a new user.
     * 
     * @param newUser User object to be created (optional)
     * @return UserEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> User language is not available as part of company subscription plan </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> User already exists </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Request body is invalid (e.g. values breaks model definition rules) </td><td>  -  </td></tr>
     </table>
     */
    public UserEntity usersCreate(NewUser newUser) throws ApiException {
        ApiResponse<UserEntity> localVarResp = usersCreateWithHttpInfo(newUser);
        return localVarResp.getData();
    }

    /**
     * Create a new user.
     * 
     * @param newUser User object to be created (optional)
     * @return ApiResponse&lt;UserEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> User language is not available as part of company subscription plan </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> User already exists </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Request body is invalid (e.g. values breaks model definition rules) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserEntity> usersCreateWithHttpInfo(NewUser newUser) throws ApiException {
        okhttp3.Call localVarCall = usersCreateValidateBeforeCall(newUser, null);
        Type localVarReturnType = new TypeToken<UserEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new user. (asynchronously)
     * 
     * @param newUser User object to be created (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> User language is not available as part of company subscription plan </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> User already exists </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Request body is invalid (e.g. values breaks model definition rules) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersCreateAsync(NewUser newUser, final ApiCallback<UserEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersCreateValidateBeforeCall(newUser, _callback);
        Type localVarReturnType = new TypeToken<UserEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersGet
     * @param id user identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling usersGet(Async)");
        }
        

        okhttp3.Call localVarCall = usersGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get details of a user with given id
     * 
     * @param id user identifier (required)
     * @return UserEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public UserEntity usersGet(String id) throws ApiException {
        ApiResponse<UserEntity> localVarResp = usersGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get details of a user with given id
     * 
     * @param id user identifier (required)
     * @return ApiResponse&lt;UserEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserEntity> usersGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = usersGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<UserEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details of a user with given id (asynchronously)
     * 
     * @param id user identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetAsync(String id, final ApiCallback<UserEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<UserEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersMe
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> My user details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersMeCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersMeValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = usersMeCall(_callback);
        return localVarCall;

    }

    /**
     * Get details of my user
     * 
     * @return UserEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> My user details </td><td>  -  </td></tr>
     </table>
     */
    public UserEntity usersMe() throws ApiException {
        ApiResponse<UserEntity> localVarResp = usersMeWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get details of my user
     * 
     * @return ApiResponse&lt;UserEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> My user details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserEntity> usersMeWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = usersMeValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UserEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details of my user (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> My user details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersMeAsync(final ApiCallback<UserEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersMeValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UserEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUpdate
     * @param id user identifier (required)
     * @param requestBody patch request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **LANGUAGE_DISABLED** Updated language is not available as part of company subscription plan * **INVALID_ROLE** when selected role is not existing in company configuration * **INVALID_LOCATION** when one of location properties contains invalid characters  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **PERMISSION_DENIED** Not permitted to access users  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> with codes * **RESOURCE_ALREADY_EXIST** when user already exists * **SSO_IDENTIFIER_ALREADY_EXISTS** when user with given ssoIdentifier already exists  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUpdateCall(String id, List<Object> requestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/users/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUpdateValidateBeforeCall(String id, List<Object> requestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling usersUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = usersUpdateCall(id, requestBody, _callback);
        return localVarCall;

    }

    /**
     * Update a user
     * 
     * @param id user identifier (required)
     * @param requestBody patch request (optional)
     * @return UserEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **LANGUAGE_DISABLED** Updated language is not available as part of company subscription plan * **INVALID_ROLE** when selected role is not existing in company configuration * **INVALID_LOCATION** when one of location properties contains invalid characters  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **PERMISSION_DENIED** Not permitted to access users  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> with codes * **RESOURCE_ALREADY_EXIST** when user already exists * **SSO_IDENTIFIER_ALREADY_EXISTS** when user with given ssoIdentifier already exists  </td><td>  -  </td></tr>
     </table>
     */
    public UserEntity usersUpdate(String id, List<Object> requestBody) throws ApiException {
        ApiResponse<UserEntity> localVarResp = usersUpdateWithHttpInfo(id, requestBody);
        return localVarResp.getData();
    }

    /**
     * Update a user
     * 
     * @param id user identifier (required)
     * @param requestBody patch request (optional)
     * @return ApiResponse&lt;UserEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **LANGUAGE_DISABLED** Updated language is not available as part of company subscription plan * **INVALID_ROLE** when selected role is not existing in company configuration * **INVALID_LOCATION** when one of location properties contains invalid characters  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **PERMISSION_DENIED** Not permitted to access users  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> with codes * **RESOURCE_ALREADY_EXIST** when user already exists * **SSO_IDENTIFIER_ALREADY_EXISTS** when user with given ssoIdentifier already exists  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserEntity> usersUpdateWithHttpInfo(String id, List<Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = usersUpdateValidateBeforeCall(id, requestBody, null);
        Type localVarReturnType = new TypeToken<UserEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a user (asynchronously)
     * 
     * @param id user identifier (required)
     * @param requestBody patch request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> with codes * **LANGUAGE_DISABLED** Updated language is not available as part of company subscription plan * **INVALID_ROLE** when selected role is not existing in company configuration * **INVALID_LOCATION** when one of location properties contains invalid characters  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> with code * **PERMISSION_DENIED** Not permitted to access users  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> with codes * **RESOURCE_ALREADY_EXIST** when user already exists * **SSO_IDENTIFIER_ALREADY_EXISTS** when user with given ssoIdentifier already exists  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUpdateAsync(String id, List<Object> requestBody, final ApiCallback<UserEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUpdateValidateBeforeCall(id, requestBody, _callback);
        Type localVarReturnType = new TypeToken<UserEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
